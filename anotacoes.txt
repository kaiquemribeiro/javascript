		JAVASCRIPT FUNDAMENTOS
		Estruturas de dados:
• Organizar e administra os dados;
• FIFO: First in first out, o primeiro a entrar é o primeiro a sair;
• LIFO: Last in first out, o ultimo a entrar é o primeiro a sair;
• Tipos: Number, String, Booleano;
• typeof para saber o tipo;
		
*variavel.Tofixed(2) > mostrar apenas duas casas decimais

		String:
• pode se usar ", ' ou `;
• variavel.charAt(4) retorna o caractere na posicao 4;
• variavel.charCodeAr(4) retorna o valor ASCII do char na posição 4;
• variavel.indexOf(4) retorna o indice do char na posicao 4;
• .concat(variavel) concatena strings;
• variavel.replace(3, 'e') susbtitui o 3 por 'e';
• ('Ana,Maria,Pedro').split(',') vai armazenar num array tudo que for separado pela virgula. Ex: ['Ana', 'Maria', 'Pedro'];
• 'Kaique ' + 'Messias ' + 'Ribeiro'. O + também concatena strings. Saida: Kaique Messias Ribeiro;
• para considerar quebras de linha e espaços usa-se o template string, com ` (crase) ao inves de aspas. ${variavel} para imprimir a variavel.

		Booleanos:
• true e false: tudo é true, exceto o 0, string vazia, null NaN e undefined;
		
		Array:
• pode ser declarado de forma literal com os dados [1, 2, 3];
• valores acessados com nomedoarray[1];
• pode-se misturar tipos no mesmo array (nao recomendado);
• no JS os arrays são dinamicos, crescem conforme a necessidade, sem necessidade de alocação manual;
• variavel.push(1, "oi", false, null) adiciona valores no array;
• variavel.pop() retorna o valor do ultimo elemento e o apaga;
• delete array[0] remove o indice selecionado do array;
• (typeof array) retorna os tipos do array;
		
		Objeto:
• é representado por {};
• é dinamico, vc pode adicionar atributos ao longo do codigo;
• const produto = {
	nome: 'Camiseta',
	preco: 89.90,
}
• pode-se criar objetos dentro de objetos;
		
		null e undefined:
• em tipo primitivos quando fazemos a = 3, b = a, fazemos uma copia do valor de a pra b, em objetos, a = {"teste"}, b = a, b recebe o endereço de memoria de a e não uma copia de seu valor, uma vez que a não armazena {"teste"} e sim aponta para o endereço onde ele esta;
• undefined é o valor padrão de quando não inicializamos uma variavel;
• null significa que a variavel nao tem nenhum valor e nao aponta pra nenhum endereço de memoria, mas foi incializada, tambem usa-se para fazer uma variavel parar de apontar;
• não podemos acessar variaveis tipo null;
		
		let e var:
• var escopo global e de função;
• let escopo global, de função e escopo de bloco;
		
		Hoisting:
• içamento, a variavel nao precisa ser declarada antes de seu uso mesmo dentro de funções;
• funciona apenas com var;

		Notação Ponto:
• usado para acessar atributos dentro de objetos;
• objeto.nomedoatributo para acessar (parecido com struct);
• this.atributo deixa a variavel visivel para todos no codigo;

		Destructuring:
		Em objetos:
• Extrair elementos de um objeto;
• const { nome: n, idade: i } = pessoa. Neste exemplo estou extraindo os valores dos atributos nome e idade do objeto pessoa. Criando duas variaveis const n e i;
• const { endereco: { logradouro, numero } } = pessoa. Extraindo os valores de logradouro e numero do objeto endereço que está dentro do objeto pessoa;
		
		Destructuring:
		Arrays:
• const [n1, n2, n3, n4] = [10, 7, 9, 8]. Extraindo os valores do array e atribuindo as variaveis n1, n2, n3 e n4;

		Operadores Aritmeticos:
• Mesma coisa do C, +-/*%;
		
		Operadores relacionais:
• Mesma coisa do C, exceto que para comparar valores e tipos usamos ===, o == só compara os valores, ex: '1' e 1 são iguais com o ==;

		Operadores lógicos:
• Mesma coisa do C, && || !;

		Unarios:
• Mesma coisa do C, ++ --;

		Ternarios:
• variavel => 7 ? 'Aprovado' : 'Reprovado', ex: nota >= 7 ? se sim 'Aprovado' senão 'Reprovado';

		break/continue;
• break: switch, for, while;
• continue: for, while;

		
			FUNÇÕES
• Chamada de First-Class Object;
• O return é opcional;
• declara-se com function;
• possivel armazenar numa variavel ou array;
• possivel armazenar em atributos de objetos;
• function nomeDaFuncao(parametros);
• JS aceita qualquer quantidade e tipo de parametros, roda normal, mas fique atento a saida;
• funções anonimas não tem nome, mas são atribuidas a uma variavel const nomeDaFuncao = function (parametros), tambem podemos declarar com 
const nomeDaFuncao = (parametros) =>{
	return valor
} isso é uma arrow function;
também podemos declarar apenas const nomeDaFuncao = (parametros) => valor, onde valor ja é o return

		bind:
• amarra o objeto do this a função que vc quer chamar;
• const nomeDaFuncao = pessoa.falar.bind(pessoa). Quando chamar essa função ela reconhecerá a variavel dentro de pessoa. Funciona apenas na chamada;
		
		arrow:
• sintaxe reduzida;
• const nomeDaFuncao = (parametros) =>{
	return valor
} isso é uma arrow function;
também podemos declarar apenas const nomeDaFuncao = (parametros) => valor, onde valor ja é o return;

		declarações:
• declaração normal;
• função anonima guardando dentro de uma variavel ou constante;

		contexto lexico:
• escopo;
• cada função carrega consigo o contexto no qual ela foi escrita;

		closure:
• escopo criado quando uma função é declarada;
• permite a função acessar manipular variaveis externas a função;

		funções factory:
• uma função que sempre retorna um objeto;
• cria a instancia de um objeto ao chama-la;
• return {objeto};
• pode receber parametros para preencher os objetos;
• 